{"version":3,"sources":["components/PostCard.js","components/PostsList.js","components/PostSearch.js","App.js","apollo.js","index.js"],"names":["PostCard","post","node","postId","title","date","excerpt","className","href","target","rel","Date","toDateString","dangerouslySetInnerHTML","__html","override","css","GET_SEARCH_POSTS","gql","PostsList","searchQuery","useQuery","variables","after","loading","error","data","fetchMore","size","color","posts","edges","length","map","key","pageInfo","hasNextPage","onClick","cursor","endCursor","updateQuery","prev","fetchMoreResult","newEdges","__typename","PostSearch","useState","setSearchQuery","onSubmit","e","preventDefault","type","name","value","placeholder","onChange","icon","faTimes","faSearch","App","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"ynDAiBeA,EAfE,SAAC,GAAc,IAAD,IAAXC,KAE8BC,KAAtCC,EAFmB,EAEnBA,OAAQC,EAFW,EAEXA,MAAOC,EAFI,EAEJA,KAAMC,EAFF,EAEEA,QAE7B,OACI,yBAAKC,UAAU,aACX,uBAAGC,KAAI,qCAAgCL,GAAUM,OAAO,SAASC,IAAI,uBACjE,uBAAGH,UAAU,SAASH,GACtB,uBAAGG,UAAU,QAAQ,IAAII,KAAKN,GAAMO,gBACpC,uBAAGL,UAAU,UAAUM,wBAAyB,CAAEC,OAAQR,Q,wpBCJ1E,IAAMS,EAAWC,cAAH,KAIRC,EAAmBC,YAAH,KAmEPC,EA/CG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACSC,YAASJ,EAAkB,CACnEK,UAAW,CACPC,MAAM,KACNH,iBAHAI,EAD2B,EAC3BA,QAASC,EADkB,EAClBA,MAAOC,EADW,EACXA,KAAMC,EADK,EACLA,UAiC9B,OAAIH,EAAgB,yBAAKjB,UAAU,aAAY,kBAAC,aAAD,CAAYqB,KAAM,GAAIZ,IAAKD,EAAUc,MAAO,YAAvE,KAChBJ,EAAc,yBAAKlB,UAAU,aAAf,gDACbmB,EAAKI,MAAMC,MAAMC,OAGlB,6BACKN,EAAKI,MAAMC,MAAME,KAAI,SAAAhC,GAAI,OAAI,kBAAC,EAAD,CAAUiC,IAAKjC,EAAKC,KAAKC,OAAQF,KAAMA,OACpEyB,EAAKI,MAAMK,SAASC,aAAe,4BAAQC,QA/BnC,WAEbV,EAAU,CACNL,UAAU,CACNgB,OAAQZ,EAAKI,MAAMK,SAASI,WAEhCC,YAAa,SAACC,EAAD,GAAgC,IAAvBC,EAAsB,EAAtBA,gBACZC,EAAWD,EAAgBZ,MAAMC,MACjCI,EAAWO,EAAgBZ,MAAMK,SACvC,OAAKO,EAGE,CACHZ,MAAO,CACHK,WACAJ,MAAM,GAAD,mBAAMU,EAAKX,MAAMC,OAAjB,YAA2BY,IAChCC,WAAY,kCANTH,MAqBgDlC,UAAU,aAArC,uBALP,yBAAKA,UAAU,aAAf,6D,kBCzB1BsC,EArCI,WAAO,IAAD,EAEiBC,mBAAS,IAF1B,mBAEd1B,EAFc,KAED2B,EAFC,KAerB,OACI,yBAAKxC,UAAU,eACX,0BAAMA,UAAU,mBAAmByC,SAbtB,SAACC,GAClBA,EAAEC,mBAaM,yBAAK3C,UAAU,SACX,2BAAO4C,KAAK,OAAOC,KAAK,cAAcC,MAAOjC,EAAakC,YAAY,6DAAgBC,SAX5E,SAACN,GACvBF,EAAeE,EAAExC,OAAO4C,UAWXjC,EAAYY,OAAS,EAAI,4BAAQK,QAR9B,WAChBU,EAAe,KAOqDxC,UAAU,4BAA2B,kBAAC,IAAD,CAAiBiD,KAAMC,IAASlD,UAAU,iBACnI,4BAAQA,UAAU,cAAa,kBAAC,IAAD,CAAiBiD,KAAME,IAAUnD,UAAU,YAIrFa,EACG,yBAAKb,UAAU,sBACX,kBAAC,EAAD,CAAWa,YAAaA,KAE5B,yBAAKb,UAAU,aAAf,mE,OCtBDoD,MATf,WACE,OACE,yBAAKpD,UAAU,OACb,yBAAKA,UAAU,WACf,kBAAC,EAAD,QCDSqD,EAJA,IAAIC,IAAa,CAC5BC,IAAK,8B,QCOTC,IAASC,OAAO,kBAAC,IAAD,CAAgBJ,OAAQA,GAAQ,kBAAC,EAAD,OAA0BK,SAASC,eAAe,W","file":"static/js/main.302df745.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PostCard = ({ post }) => {\r\n\r\n    const { postId, title, date, excerpt } = post.node;\r\n\r\n    return (\r\n        <div className=\"post-card\">\r\n            <a href={`https://heavybear.net/post/${postId}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <p className=\"title\">{title}</p>\r\n                <p className=\"date\">{new Date(date).toDateString()}</p>\r\n                <p className=\"summary\" dangerouslySetInnerHTML={{ __html: excerpt }}></p>\r\n            </a>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default PostCard;\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport PostCard from './PostCard'\r\nimport { css } from \"@emotion/core\";\r\nimport { BeatLoader } from \"react-spinners\";\r\n\r\nconst override = css`\r\n    margin:0 auto;\r\n    text-align:center;\r\n`\r\nconst GET_SEARCH_POSTS = gql`\r\n    query getSearchPosts($cursor:String, $searchQuery: String!){\r\n        posts(first:5, after:$cursor, where : {search: $searchQuery}){\r\n            pageInfo{\r\n                endCursor\r\n                hasNextPage\r\n            }\r\n            edges{\r\n                node{\r\n                    postId\r\n                    title\r\n                    excerpt\r\n                    date\r\n                }\r\n            }\r\n            __typename\r\n        }\r\n    }\r\n`;\r\n\r\nconst PostsList = ({ searchQuery }) => {\r\n    const { loading, error, data, fetchMore } = useQuery(GET_SEARCH_POSTS, {\r\n        variables: { \r\n            after:null,\r\n            searchQuery\r\n         }\r\n    })\r\n\r\n    \r\n\r\n    const loadMore = () => {\r\n        \r\n        fetchMore({\r\n            variables:{\r\n                cursor: data.posts.pageInfo.endCursor\r\n            },\r\n            updateQuery: (prev, { fetchMoreResult }) => {\r\n                const newEdges = fetchMoreResult.posts.edges;\r\n                const pageInfo = fetchMoreResult.posts.pageInfo;\r\n                if (!fetchMoreResult) {\r\n                    return prev;\r\n                }\r\n                return {\r\n                    posts: {\r\n                        pageInfo,\r\n                        edges: [...prev.posts.edges, ...newEdges],\r\n                        __typename: \"RootQueryToPostConnectionEdge\"\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    if (loading) return <div className=\"alert_box\"><BeatLoader size={10} css={override} color={\"#01c080\"} /> </div>;\r\n    if (error) return <div className=\"alert_box\">오류가 있습니다.</div>;\r\n    if (!data.posts.edges.length) return <div className=\"alert_box\">검색결과가 없습니다.</div>\r\n\r\n    return (\r\n        <div>\r\n            {data.posts.edges.map(post => <PostCard key={post.node.postId} post={post} />)}\r\n            {data.posts.pageInfo.hasNextPage && <button onClick={loadMore} className=\"load_more\">더보기</button>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default PostsList\r\n","import React, { useState } from 'react'\r\nimport PostsList from './PostsList';\r\nimport { faTimes, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst PostSearch = () => {\r\n\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        setSearchQuery(e.target.value);\r\n    }\r\n\r\n    const deleteInput = () => {\r\n        setSearchQuery('')\r\n    }\r\n    return (\r\n        <div className=\"post-search\">\r\n            <form className=\"post-search-form\" onSubmit={handleSubmit}>\r\n                <div className=\"frame\">\r\n                    <input type=\"text\" name=\"searchQuery\" value={searchQuery} placeholder=\"포스트를 검색합니다...\" onChange={handleInputChange} />\r\n                    {searchQuery.length > 0 ? <button onClick={deleteInput} className=\"input_icon delete_button\"><FontAwesomeIcon icon={faTimes} className=\"icon delete\" /></button> :\r\n                        <button className=\"input_icon\"><FontAwesomeIcon icon={faSearch} className=\"icon\" /></button>\r\n                    }\r\n                </div>\r\n            </form>\r\n            {searchQuery ?\r\n                <div className=\"post-search-result\">\r\n                    <PostsList searchQuery={searchQuery} />\r\n                </div> :\r\n                <div className=\"placehold\">\r\n                    검색어를 입력해주세요\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostSearch\r\n","import React from 'react';\r\nimport PostSearch from './components/PostSearch';\r\nimport './css/style.scss';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"top_bg\"></div>\r\n      <PostSearch />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ApolloClient from 'apollo-boost';\r\n\r\nconst client = new ApolloClient({\r\n    uri: \"https://batdog.kr/graphql\"\r\n})\r\n\r\nexport default client;","import 'core-js/stable';\r\nimport 'regenerator-runtime/runtime';\r\nimport 'react-app-polyfill/ie9';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport client from './apollo';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\n\r\nReactDOM.render(<ApolloProvider client={client}><App /></ApolloProvider>, document.getElementById('root'));\r\n"],"sourceRoot":""}