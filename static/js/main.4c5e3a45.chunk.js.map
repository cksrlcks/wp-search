{"version":3,"sources":["components/PostCard.js","components/PostsList.js","components/PostSearch.js","App.js","apollo.js","index.js"],"names":["PostCard","post","node","postId","title","date","excerpt","className","href","target","rel","Date","toDateString","dangerouslySetInnerHTML","__html","override","css","GET_SEARCH_POSTS","gql","PostsList","searchQuery","useQuery","variables","loading","error","data","size","color","posts","edges","length","map","key","PostSearch","useState","setSearchQuery","onSubmit","e","preventDefault","type","name","value","placeholder","onChange","onClick","icon","faTimes","faSearch","App","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"gnDAiBeA,EAfE,SAAC,GAAc,IAAD,IAAXC,KAE8BC,KAAtCC,EAFmB,EAEnBA,OAAQC,EAFW,EAEXA,MAAOC,EAFI,EAEJA,KAAMC,EAFF,EAEEA,QAE7B,OACI,yBAAKC,UAAU,aACX,uBAAGC,KAAI,qCAAgCL,GAAUM,OAAO,SAASC,IAAI,uBACjE,uBAAGH,UAAU,SAASH,GACtB,uBAAGG,UAAU,QAAQ,IAAII,KAAKN,GAAMO,gBACpC,uBAAGL,UAAU,UAAUM,wBAAyB,CAAEC,OAAQR,Q,0fCJ1E,IAAMS,EAAWC,cAAH,KAIRC,EAAmBC,YAAH,KA4BPC,EAbG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACFC,YAASJ,EAAkB,CACxDK,UAAW,CAAEF,iBADTG,EAD2B,EAC3BA,QAASC,EADkB,EAClBA,MAAOC,EADW,EACXA,KAIxB,OAAIF,EAAgB,yBAAKhB,UAAU,aAAY,kBAAC,aAAD,CAAYmB,KAAM,GAAIV,IAAKD,EAAUY,MAAO,YAAvE,KAChBH,EAAc,yBAAKjB,UAAU,aAAf,gDACbkB,EAAKG,MAAMC,MAAMC,OAEfL,EAAKG,MAAMC,MAAME,KAAI,SAAA9B,GAAI,OAAI,kBAAC,EAAD,CAAU+B,IAAK/B,EAAKC,KAAKC,OAAQF,KAAMA,OAFtC,yBAAKM,UAAU,aAAf,6D,kBCS1B0B,EArCI,WAAO,IAAD,EAEiBC,mBAAS,IAF1B,mBAEdd,EAFc,KAEDe,EAFC,KAerB,OACI,yBAAK5B,UAAU,eACX,0BAAMA,UAAU,mBAAmB6B,SAbtB,SAACC,GAClBA,EAAEC,mBAaM,yBAAK/B,UAAU,SACX,2BAAOgC,KAAK,OAAOC,KAAK,cAAcC,MAAOrB,EAAasB,YAAY,6DAAgBC,SAX5E,SAACN,GACvBF,EAAeE,EAAE5B,OAAOgC,UAWXrB,EAAYU,OAAS,EAAI,4BAAQc,QAR9B,WAChBT,EAAe,KAOqD5B,UAAU,4BAA2B,kBAAC,IAAD,CAAiBsC,KAAMC,IAASvC,UAAU,iBACnI,4BAAQA,UAAU,cAAa,kBAAC,IAAD,CAAiBsC,KAAME,IAAUxC,UAAU,YAIrFa,EACG,yBAAKb,UAAU,sBACX,kBAAC,EAAD,CAAWa,YAAaA,KAE5B,yBAAKb,UAAU,aAAf,mE,OCtBDyC,MATf,WACE,OACE,yBAAKzC,UAAU,OACb,yBAAKA,UAAU,WACf,kBAAC,EAAD,QCDS0C,EAJA,IAAIC,IAAa,CAC5BC,IAAK,8B,QCOTC,IAASC,OAAO,kBAAC,IAAD,CAAgBJ,OAAQA,GAAQ,kBAAC,EAAD,OAA0BK,SAASC,eAAe,W","file":"static/js/main.4c5e3a45.chunk.js","sourcesContent":["import React from 'react'\n\nconst PostCard = ({ post }) => {\n\n    const { postId, title, date, excerpt } = post.node;\n\n    return (\n        <div className=\"post-card\">\n            <a href={`https://heavybear.net/post/${postId}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                <p className=\"title\">{title}</p>\n                <p className=\"date\">{new Date(date).toDateString()}</p>\n                <p className=\"summary\" dangerouslySetInnerHTML={{ __html: excerpt }}></p>\n            </a>\n        </div >\n    )\n}\n\nexport default PostCard;\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport PostCard from './PostCard'\nimport { css } from \"@emotion/core\";\nimport { BeatLoader } from \"react-spinners\";\n\nconst override = css`\n    margin:0 auto;\n    text-align:center;\n`\nconst GET_SEARCH_POSTS = gql`\n    query getSearchPosts($searchQuery: String!){\n        posts(where : {search: $searchQuery}){\n            edges{\n                node{\n                    postId\n                    title\n                    excerpt\n                    date\n                }\n            }\n        }\n    }\n`;\n\nconst PostsList = ({ searchQuery }) => {\n    const { loading, error, data } = useQuery(GET_SEARCH_POSTS, {\n        variables: { searchQuery }\n    })\n\n    if (loading) return <div className=\"alert_box\"><BeatLoader size={10} css={override} color={\"#01c080\"} /> </div>;\n    if (error) return <div className=\"alert_box\">오류가 있습니다.</div>;\n    if (!data.posts.edges.length) return <div className=\"alert_box\">검색결과가 없습니다.</div>\n\n    return data.posts.edges.map(post => <PostCard key={post.node.postId} post={post} />)\n\n}\n\nexport default PostsList\n","import React, { useState } from 'react'\nimport PostsList from './PostsList';\nimport { faTimes, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst PostSearch = () => {\n\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n    const handleInputChange = (e) => {\n        setSearchQuery(e.target.value);\n    }\n\n    const deleteInput = () => {\n        setSearchQuery('')\n    }\n    return (\n        <div className=\"post-search\">\n            <form className=\"post-search-form\" onSubmit={handleSubmit}>\n                <div className=\"frame\">\n                    <input type=\"text\" name=\"searchQuery\" value={searchQuery} placeholder=\"포스트를 검색합니다...\" onChange={handleInputChange} />\n                    {searchQuery.length > 0 ? <button onClick={deleteInput} className=\"input_icon delete_button\"><FontAwesomeIcon icon={faTimes} className=\"icon delete\" /></button> :\n                        <button className=\"input_icon\"><FontAwesomeIcon icon={faSearch} className=\"icon\" /></button>\n                    }\n                </div>\n            </form>\n            {searchQuery ?\n                <div className=\"post-search-result\">\n                    <PostsList searchQuery={searchQuery} />\n                </div> :\n                <div className=\"placehold\">\n                    검색어를 입력해주세요\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default PostSearch\n","import React from 'react';\nimport PostSearch from './components/PostSearch';\nimport './css/style.scss';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"top_bg\"></div>\n      <PostSearch />\n    </div>\n  );\n}\n\nexport default App;\n","import ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n    uri: \"https://batdog.kr/graphql\"\n})\n\nexport default client;","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport client from './apollo';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nReactDOM.render(<ApolloProvider client={client}><App /></ApolloProvider>, document.getElementById('root'));\n"],"sourceRoot":""}